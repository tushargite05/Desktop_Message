from queue import PriorityQueue

def best_first_search(graph, start, goal):
    visited = set()
    queue = PriorityQueue()
    queue.put((0, [start]))

    while not queue.empty():
        cost, path = queue.get()
        current = path[-1]
        if current == goal:
            return path
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    new_path = list(path)
                    new_path.append(neighbor)
                    queue.put((graph[current][neighbor], new_path))
    return []

def depth_first_search(graph, start, goal):
    visited = set()
    stack = [[start]]

    while stack:
        path = stack.pop()
        current = path[-1]
        if current == goal:
            return path
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    new_path = list(path)
                    new_path.append(neighbor)
                    stack.append(new_path)
    return []

def main():
    graph = {}
    n = int(input("Enter the number of nodes: "))
    for i in range(n):
        node = input("Enter the node: ")
        graph[node] = {}
        m = int(input("Enter the number of neighbors: "))
        for j in range(m):
            neighbor = input("Enter the neighbor: ")
            cost = int(input("Enter the cost: "))
            graph[node][neighbor] = cost

    start = input("Enter the start node: ")
    goal = input("Enter the goal node: ")

    while True:
        print("1. Best First Search")
        print("2. Depth First Search")
        print("3. Exit")
        choice = int(input("Enter your choice: "))

        if choice == 1:
            result = best_first_search(graph, start, goal)
            if result:
                print(f"Path from {start} to {goal}: {' -> '.join(result)}")
            else:
                print(f"No path exists from {start} to {goal}")
        elif choice == 2:
            result = depth_first_search(graph, start, goal)
            if result:
                print(f"Path from {start} to {goal}: {' -> '.join(result)}")
            else:
                print(f"No path exists from {start} to {goal}")
        elif choice == 3:
            break
        else:
            print("Invalid choice")

if __name__ == "__main__":
    main()
